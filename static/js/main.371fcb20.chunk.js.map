{"version":3,"sources":["reducer.js","actions.js","context.js","SearchForm.js","Stories.js","Buttons.js","App.js","index.js"],"names":["reducer","state","action","type","isLoading","nbPages","payload","hits","filter","hit","objectID","query","page","nextPage","prevPage","Error","initialState","AppContext","React","createContext","AppProvider","children","useReducer","dispatch","fetchStories","url","a","fetch","response","json","data","console","log","useEffect","Provider","value","removeStory","id","handleSearch","handlePage","useGlobalContext","useContext","SearchForm","className","onSubmit","e","preventDefault","onChange","target","Stories","map","story","title","num_comments","author","points","date","created_at","key","moment","format","href","rel","onClick","Buttons","disabled","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.371fcb20.chunk.js","sourcesContent":["import {\n    SET_LOADING,\n    SET_STORIES,\n    REMOVE_STORY,\n    HANDLE_PAGE,\n    HANDLE_SEARCH,\n} from \"./actions\";\n\nconst reducer = (state, action) => {\n    switch (action.type) {\n        case SET_LOADING:\n            return { ...state, isLoading: true };\n        case SET_STORIES:\n            return {\n                ...state,\n                isLoading: false,\n                nbPages: action.payload.nbPages,\n                hits: action.payload.hits,\n            };\n\n        case REMOVE_STORY:\n            return {\n                ...state,\n                hits: state.hits.filter(\n                    (hit) => hit.objectID !== action.payload\n                ),\n            };\n\n        case HANDLE_SEARCH:\n            return {\n                ...state,\n                query: action.payload,\n                page: 0,\n            };\n\n        case HANDLE_PAGE:\n            if (action.payload === \"inc\") {\n                let nextPage = state.page + 1;\n                if (nextPage > state.nbPages - 1) {\n                    nextPage = 0;\n                }\n\n                return { ...state, page: nextPage };\n            }\n            if (action.payload === \"dec\") {\n                let prevPage = state.page - 1;\n                if (prevPage < 0) {\n                    prevPage = state.nbPages - 1;\n                }\n\n                return { ...state, page: prevPage };\n            }\n            break;\n        default:\n            throw new Error(`no matching \"${action.type}\" action type`);\n    }\n};\nexport default reducer;\n","export const SET_LOADING = 'SET_LOADING'\nexport const SET_STORIES = 'SET_STORIES'\nexport const REMOVE_STORY = 'REMOVE_STORY'\nexport const HANDLE_PAGE = 'HANDLE_PAGE'\nexport const HANDLE_SEARCH = 'HANDLE_SEARCH'\n","import React, { useContext, useEffect, useReducer } from \"react\";\n\nimport {\n    SET_LOADING,\n    SET_STORIES,\n    REMOVE_STORY,\n    HANDLE_PAGE,\n    HANDLE_SEARCH,\n} from \"./actions\";\nimport reducer from \"./reducer\";\n\nconst API_END_POINT = \"https://hn.algolia.com/api/v1/search?\";\n\nconst initialState = {\n    isLoading: true,\n    hits: [],\n    query: \"react\",\n    page: 0,\n    nbPages: 0,\n};\n\nconst AppContext = React.createContext();\n\nconst AppProvider = ({ children }) => {\n    const [state, dispatch] = useReducer(reducer, initialState);\n\n    const fetchStories = async (url) => {\n        dispatch({ type: SET_LOADING });\n        try {\n            const response = await fetch(url);\n            const data = await response.json();\n            dispatch({\n                type: SET_STORIES,\n                payload: { hits: data.hits, nbPages: data.nbPages },\n            });\n        } catch (error) {\n            console.log(error);\n        }\n    };\n\n    useEffect(() => {\n        fetchStories(`${API_END_POINT}query=${state.query}&page=${state.page}`);\n    }, [state.query, state.page]);\n\n    const removeStory = (id) => {\n        dispatch({ type: REMOVE_STORY, payload: id });\n    };\n    const handleSearch = (query) => {\n        dispatch({ type: HANDLE_SEARCH, payload: query });\n    };\n\n    const handlePage = (value) => {\n        dispatch({ type: HANDLE_PAGE, payload: value });\n        // console.log(value);\n    };\n    return (\n        <AppContext.Provider\n            value={{ ...state, removeStory, handleSearch, handlePage }}\n        >\n            {children}\n        </AppContext.Provider>\n    );\n};\n// make sure use\nexport const useGlobalContext = () => {\n    return useContext(AppContext);\n};\n\nexport { AppContext, AppProvider };\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nconst SearchForm = () => {\n    const { query, handleSearch } = useGlobalContext();\n    return (\n        <form\n            action=\"\"\n            className=\"search-form\"\n            onSubmit={(e) => {\n                e.preventDefault();\n            }}\n        >\n            <h2>search hacker news</h2>\n            <input\n                type=\"text\"\n                className=\"form-input\"\n                value={query}\n                onChange={(e) => {\n                    handleSearch(e.target.value);\n                }}\n            />\n        </form>\n    );\n};\n\nexport default SearchForm;\n","import React from \"react\";\nimport moment from \"moment\";\nimport { useGlobalContext } from \"./context\";\n\nconst Stories = () => {\n    const { isLoading, hits, removeStory } = useGlobalContext();\n    if (isLoading) {\n        return <div className=\"loading\"></div>;\n    }\n    return (\n        <section className=\"stories\">\n            {hits.map((story) => {\n                const {\n                    objectID: id,\n                    title,\n                    url,\n                    num_comments,\n                    author,\n                    points,\n                    created_at: date,\n                } = story;\n\n                return (\n                    <article key={id} className=\"story\">\n                        <h4 className=\"title\">{title}</h4>\n                        <p className=\"info\">\n                            {points} points by <span> {author} | </span>\n                            {num_comments} comments\n                        </p>\n                        <p className=\"info\">\n                            Created at{\" \"}\n                            {moment(date).format(\"MMMM Do, dddd, YYYY\")}\n                        </p>\n                        <div>\n                            <a\n                                href={url}\n                                className=\"read-link\"\n                                target=\"_blank\"\n                                rel=\"noopener noreferrer\"\n                            >\n                                {\" \"}\n                                read more\n                            </a>\n                            <button\n                                className=\"remove-btn\"\n                                onClick={() => {\n                                    removeStory(id);\n                                }}\n                            >\n                                remove\n                            </button>\n                        </div>\n                    </article>\n                );\n            })}\n        </section>\n    );\n};\n\nexport default Stories;\n","import React from \"react\";\nimport { useGlobalContext } from \"./context\";\n\nconst Buttons = () => {\n    const { page, nbPages, isLoading, handlePage } = useGlobalContext();\n    /* if (isLoading) {\n        return;\n    } */\n    return <div className=\"btn-container\">\n      <button disabled={isLoading} onClick={()=>handlePage('dec')}>prev</button>\n      <p>{page + 1} of {nbPages}</p>\n      <button disabled={isLoading} onClick={()=>handlePage('inc')}>next</button>\n    </div>;\n};\n\nexport default Buttons;\n","import React from \"react\";\nimport SearchForm from \"./SearchForm\";\nimport Stories from \"./Stories\";\nimport Buttons from \"./Buttons\";\nfunction App() {\n    return (\n        <>\n            <SearchForm />\n            <Buttons />\n            <Stories />\n        </>\n    );\n}\nexport default App;\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { AppProvider } from './context'\nReactDOM.render(\n  <React.StrictMode>\n    <AppProvider>\n      <App />\n    </AppProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}